
from typing import List
from models.County import County
from constants.state_codes import state_to_code
import pandas as pd
from threading import Thread


class State:
    def __init__(self, state_name: str):
        self.state_code = state_to_code[state_name]
        self.state_name = state_name

        # read in from CSV files
        self.counties: List[County] = []

        # df = pd.read_csv(f"data/{self.state_name.lower()}_counties.csv", dtype=str)
        df = pd.read_csv('../data/state_county_codes.csv', dtype=str)
        race_percentages_df = pd.read_csv('../data/percent_white_by_county.csv')
        county_populations_df = pd.read_csv('../data/county_populations.csv')

        for index, row in df[df['state'] == self.state_name].iterrows():
            self.counties.append(County(row['county_name'], row['county_code'], row['state'], row['state_code'], race_percentages_df, county_populations_df))

    def get_county_data(self):
        tasks = []
        for county in self.counties:
            tasks.append(Thread(target=county.fetch_all_self_data))
            tasks[len(tasks) - 1].start()
            # county.fetch_all_self_data()
            # county.get_income_levels()
            # county.get_education_levels()
            # county.get_race_percentages()
        for task in tasks:
            task.join()

    def display_county_data(self):
        print(f'Displaying census data for {self.state_name}')
        for county in self.counties:
            print(f'County Name: {county.county_name}, median income: {county.median_income}, ')
            print(f'\tpercent people with at least high school or equiv: {county.percent_people_with_at_least_high_school},')
            print(f'\tpercent people with undergrad degree: {county.percent_people_with_at_least_bachelors},')
            print(f'\tpercentage of white people: {county.percent_white}')

    def write_county_data(self):
        fh = open('../data/state_county_demographics.csv', 'a')
        for county in self.counties:
            fh.write(f'{self.state_name},{county.county_name},{county.median_income},{county.percent_people_with_at_least_high_school},{county.percent_people_with_at_least_bachelors},{county.percent_white},{county.total_population}\n')
        fh.close()
