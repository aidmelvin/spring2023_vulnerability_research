
from constants.urls import INCOME_BASE_URL, INCOME_ESTIMATES, EDUCATION_BASE_URL, EDUCATION_ESTIMATES, \
                      RACE_BASE_URL, RACE_ESTIMATES
from constants.state_codes import state_abbreviations
import requests
import json


class County:
    def __init__(self, county_name: str, county_code: str, state_name: str, state_code: str, race_percentages_df, total_population_df):
        self.county_name: str = county_name
        self.county_code: str = county_code
        self.state_name: str = state_name
        self.state_code: str = state_code
        self.median_income: int = -1
        self.percent_people_with_at_least_high_school: float = -1.0
        self.percent_people_with_at_least_bachelors: float = -1.0
        self.percent_white: float = -1.0
        self.race_percentages_df = race_percentages_df
        self.total_population = -1
        self.total_population_df = total_population_df

    def fetch_all_self_data(self):
        self.get_income_levels()
        self.get_education_levels()
        self.get_race_percentages()
        self.get_total_population()

    def get_income_levels(self):
        try:
            self.median_income = int(json.loads(requests.get(f'{INCOME_BASE_URL}{INCOME_ESTIMATES.format(county_code=self.county_code, state_code=self.state_code)}').content)[1][2])
        except Exception as e:
            print(f'exception in {self.county_name}: {e}')

    def get_education_levels(self):
        try:
            response = json.loads(requests.get(f'{EDUCATION_BASE_URL}{EDUCATION_ESTIMATES.format(county_code=self.county_code, state_code=self.state_code)}').content)
            self.percent_people_with_at_least_high_school = float(response[1][0])
            self.percent_people_with_at_least_bachelors = float(response[1][1])
        except Exception as e:
            print(f'exception in {self.county_name}: {e}')

    def get_race_percentages(self):
        try:
            search_results = self.race_percentages_df[(self.race_percentages_df['STNAME'] == state_abbreviations[self.state_name]) & (self.race_percentages_df['CTYNAME'] == self.county_name)]
            if len(search_results) == 1:
                self.percent_white = search_results.iloc[0]['percent_white']
        except Exception as e:
            print(f'exception getting race percentages in {self.county_name}: {e}')

    def get_total_population(self):
        try:
            search_results = self.total_population_df[(self.total_population_df['state'] == state_abbreviations[self.state_name]) & (self.total_population_df['county'] == self.county_name)]
            if len(search_results) == 1:
                self.total_population = search_results.iloc[0]['population']
        except Exception as e:
            print(f'exception getting race percentages in {self.county_name}: {e}')
