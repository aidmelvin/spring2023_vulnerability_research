
from urls.urls import INCOME_BASE_URL, INCOME_ESTIMATES, EDUCATION_BASE_URL, EDUCATION_ESTIMATES, \
                      RACE_BASE_URL, RACE_ESTIMATES
import requests
import json


class County:
    def __init__(self, county_name: str, county_code: str, state_name: str, state_code: str):
        self.county_name: str = county_name
        self.county_code: str = county_code
        self.state_name: str = state_name
        self.state_code: str = state_code
        self.median_income: int = -1
        self.percent_people_with_at_least_high_school: float = -1.0
        self.percent_people_with_at_least_bachelors: float = -1.0
        self.percent_white: float = -1.0

    def fetch_all_self_data(self):
        self.get_income_levels()
        self.get_education_levels()
        self.get_race_percentages()

    def get_income_levels(self):
        try:
            self.median_income = int(json.loads(requests.get(f'{INCOME_BASE_URL}{INCOME_ESTIMATES.format(county_code=self.county_code, state_code=self.state_code)}').content)[1][2])
        except Exception as e:
            print(f'exception in {self.county_name}: {e}')

    def get_education_levels(self):
        try:
            response = json.loads(requests.get(f'{EDUCATION_BASE_URL}{EDUCATION_ESTIMATES.format(county_code=self.county_code, state_code=self.state_code)}').content)
            self.percent_people_with_at_least_high_school = float(response[1][0])
            self.percent_people_with_at_least_bachelors = float(response[1][1])
        except Exception as e:
            print(f'exception in {self.county_name}: {e}')

    def get_race_percentages(self):
        try:
            self.percent_white = json.loads(requests.get(f'{RACE_BASE_URL}{RACE_ESTIMATES.format(county_code=self.county_code, state_code=self.state_code)}').content)[1][0]
        except Exception as e:
            print(f'exception in {self.county_name}: {e}')
